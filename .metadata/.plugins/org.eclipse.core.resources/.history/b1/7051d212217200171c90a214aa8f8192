/*
 ============================================================================
 Name        : LinkedlistInC.c
 Author      : AbhishekBakare
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>

struct node{
    int data;
    struct node *next;
};

struct node *createNode(int data){
    struct node *temp = (struct node *)malloc(sizeof(struct node));
    temp->data = data;
    temp->next = NULL;
    return temp;
}

struct node *createLinkedList(){
    srand(time(NULL));
    struct node *head = NULL, *prev;
    for(int i = 1;i <= rand() % 315873957;i++){
        if(head == NULL){
            head = createNode(rand() % 1328);
            prev = head;
        }
        else{
            struct node *temp = createNode(rand() % 1328);
            prev->next = temp;
            prev = temp;
        }
    }
    return head;
}

void printList(struct node *temp){
    while(temp != NULL){
    	printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

struct node *deleteFromLinkedList(struct node *head, int data){
    struct node *temp = head;
    if(head->data == data){
        head = head->next;
        free (temp);
        return head;
    }
    struct node *prev = NULL;
    temp = temp->next;
    while(temp){
        if(temp->data == data){
            prev->next = temp->next;
            free (temp);
            return head;
        }
        prev = temp;
        temp = temp->next;
    }
    return head;
}

struct node *reverseLinkedList(struct node *head){
    struct node *prev = NULL;
    struct node *curr = head;
    struct node *next;
    while(curr){
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
    }
    return prev;
}

void printReverse(struct node *head){
    if(head){
        printReverse(head->next);
        printf("%d ", head->data);
    }
}

void printMiddle(struct node *head){
    struct node *slowPtr = head;
    struct node *fastPtr = head;
    while(slowPtr && fastPtr && fastPtr->next){
        slowPtr = slowPtr->next;
        fastPtr = fastPtr->next->next;
    }
    printf("\nMiddle Element is :: %d\n", slowPtr->data);
}

int main(){
    struct node *head = NULL;
    head = createLinkedList();
    printList(head);
    head = deleteFromLinkedList(head, 6);
    printList(head);
    head = reverseLinkedList(head);
    printList(head);
    printReverse(head);
    printMiddle(head);
    cout << endl;
    head = deleteGreater(head, rand()%1328);
    printList(head);
    return 0;
}
